package driver;

import java.util.HashSet;
import java.util.Set;

/**
 * This class holds the summary generated by the algorithm.
 * The redPairs set holds the StudentPairs with the case of significant plagiarism.
 * The yellowPairs set holds the StudentPairs with the case for medium plagiarism.
 * The greenIds set holds the StudentPairs with the case for no/insignificant plagiarism.
 * @author Darshan Panse
 * @author Shail Shah
 * 
 */
public class Summary {
	private Set<StudentPair> redPairs = new HashSet<>();
	private Set<StudentPair> yellowPairs = new HashSet<>();
	private Set<Integer> greenIds = new HashSet<>();

	/**
	 * Get a set of student pairs that are suspected to have significant plagiarism
	 * @return a set of student pairs that are suspected to have significant plagiarism
	 */
	public Set<StudentPair> getRedPairs() {
		return redPairs;
	}

	/**
	 * Add a student pair to the set containing pairs suspected to have significant plagiarism
	 * @param sp a student pair
	 */
	public void setRedPairs(StudentPair sp) {
		this.redPairs.add(sp);
	}

	/**
	 * Get a set of student pairs that are suspected to have medium plagiarism
	 * @return a set of student pairs that are suspected to have medium plagiarism
	 */
	public Set<StudentPair> getYellowPairs() {
		return yellowPairs;
	}

	/**
	 * Add a student pair to the set containing pairs suspected to have medium plagiarism
	 * @param sp a student pair
	 */
	public void setYellowPairs(StudentPair sp) {
		this.yellowPairs.add(sp);
	}

	/**
	 * Get a set of student pairs that are suspected to have no/insignificant plagiarism
	 * @return a set of student pairs that are suspected to have no/insignificant plagiarism
	 */
	public Set<Integer> getGreenIds() {
		return greenIds;
	}

	/**
	 * Add a studentId to the set containing student Ids of students who are not believed to have cheated
	 * @param studentId the Id of a student
	 */
	public void setGreenIds(Integer studentId) {
		this.greenIds.add(studentId);
	}
	
	/**
	 * This method returns false if the given studentId is present in redPairs or yellowPairs lists,
	 * else returns true.
	 * @param studentId
	 * @return boolean
	 */
	public boolean isSafe(Integer studentId) {
		return redPairs.stream().noneMatch(p -> p.getStudentId1().equals(studentId) || p.getStudentId2().equals(studentId))
				&& yellowPairs.stream().noneMatch(p -> p.getStudentId1().equals(studentId) || p.getStudentId2().equals(studentId));
	}
}
